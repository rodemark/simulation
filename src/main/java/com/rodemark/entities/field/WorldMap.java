package com.rodemark.entities.field;import com.rodemark.actions.PathFinder;import com.rodemark.base_entity.Entity;import com.rodemark.base_entity.Vegetation;import com.rodemark.base_entity.Herbivore;import com.rodemark.base_entity.Predator;import java.util.*;public class WorldMap {    private final int width;    private final int height;    private final HashMap<Cell, Entity> entities;    public WorldMap(HashMap<Cell, Entity> entities, int height, int width) {        this.width = width;        this.height = height;        this.entities = entities;    }    public int getWidth() {        return width;    }    public int getHeight() {        return height;    }    public int getMapSize(){        return width * height;    }    public void addEntity(Entity entity){        entities.put(entity.getPosition(), entity);    }    public void removeEntity(Entity entity){        entities.remove(entity.getPosition());    }    public Entity getEntityFromCell(Cell cell){        return entities.get(cell);    }    public HashMap<Cell, Entity> getEntities() {        return entities;    }    public boolean existPredators(){        for (Map.Entry<Cell, Entity> entry : entities.entrySet()) {            Entity entity = entry.getValue();            if (entity instanceof Predator){                return true;            }        }        return false;    }    public boolean existHerbivores(){        for (Map.Entry<Cell, Entity> entry : entities.entrySet()) {            Entity entity = entry.getValue();            if (entity instanceof Herbivore){                return true;            }        }        return false;    }    public boolean existFoodForHerbivores() {        for (Map.Entry<Cell, Entity> entry : entities.entrySet()) {            Entity entity = entry.getValue();            if (entity instanceof Vegetation){                return true;            }        }        return false;    }    public void removeAllPredators() {        entities.entrySet().removeIf(entry -> entry.getValue() instanceof Predator);    }    public void removeAllHerbivores() {        entities.entrySet().removeIf(entry -> entry.getValue() instanceof Herbivore);    }    public void printMap() {        String ANSI_BG_BROWN = "\u001B[43m";        String ANSI_BG_DEFAULT = "\u001B[0m";        StringBuilder stringBuilder = new StringBuilder();        stringBuilder.append("â€”".repeat(width * 3 + 3));        System.out.println(ANSI_BG_BROWN + stringBuilder);        for (int y = 0; y < height; y++) {            for (int x = 0; x < width; x++) {                if (x == 0) {                    System.out.print("  ");                }                Cell currentCell = new Cell(x, y);                Entity entity = entities.get(currentCell);                if (entity != null) {                    System.out.print(entity.getSymbol() + " ");                } else {                    System.out.print(". " + " ");                }            }            System.out.println();        }        System.out.println(stringBuilder);        System.out.println(ANSI_BG_DEFAULT);    }    public boolean existPath() {        PathFinder pathFinder = new PathFinder();        for (Map.Entry<Cell, Entity> entry : entities.entrySet()) {            Entity entity = entry.getValue();            Cell cell = entry.getKey();            Class<? extends Entity> targetType;            if (entity instanceof Predator) {                targetType = Herbivore.class;            } else if (entity instanceof Herbivore) {                targetType = Vegetation.class;            } else {                continue;            }            Set<Cell> visited = new HashSet<>();            visited.add(cell);            List<Cell> list = pathFinder.getValidNeighbors(this, cell, visited, targetType);            if (!list.isEmpty()) {                return true; // Path found for at least one entity            }        }        return false; // No path found for any entity    }}